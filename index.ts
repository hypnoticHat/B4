import readline from 'readline';

async function showMenu() {
  console.log(`
üìö H·ªÜ TH·ªêNG QU·∫¢N L√ù TH∆Ø VI·ªÜN
1. Th√™m ng∆∞·ªùi d√πng
2. Th√™m s√°ch
3. M∆∞·ª£n s√°ch
4. Tr·∫£ s√°ch
5. Danh s√°ch ng∆∞·ªùi d√πng
6. Danh s√°ch s√°ch
7. T√¨m ki·∫øm n√¢ng cao
8. T√¨m s√°ch theo t√™n/t√°c gi·∫£
9. T√¨m ng∆∞·ªùi d√πng theo t√™n/email
0. Tho√°t
  `);
}

function ask(question: string): Promise<string> {
  const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
  return new Promise(resolve => rl.question(question, ans => {
    rl.close();
    resolve(ans);
  }));
}

async function main() {
  while (true) {
    await showMenu();
    const choice = await ask('üëâ Ch·ªçn ch·ª©c nƒÉng (0-9): ');

    switch (choice.trim()) {
      case '1': {
        const { addUser } = await import('./routes/addUser');
        const name = await ask('T√™n ng∆∞·ªùi d√πng: ');
        const email = await ask('Email (b·ªè tr·ªëng n·∫øu kh√¥ng c√≥): ');
        const phone = await ask('SƒêT (b·ªè tr·ªëng n·∫øu kh√¥ng c√≥): ');
        await addUser(name.trim(), email.trim() || undefined, phone.trim() || undefined);
        break;
      }

      case '2': {
        const { addBook } = await import('./routes/addBook');
        const title = await ask('T√™n s√°ch: ');
        const author = await ask('T√°c gi·∫£: ');
        const publishedDate = await ask('Ng√†y xu·∫•t b·∫£n (YYYY-MM-DD): ');
        const category = await ask('Th·ªÉ lo·∫°i: ');
        const quantity = parseInt(await ask('S·ªë l∆∞·ª£ng: '));
        const availableStr = await ask('S·ªë l∆∞·ª£ng c√≤n l·∫°i (b·ªè tr·ªëng ƒë·ªÉ b·∫±ng t·ªïng): ');
        const available = availableStr ? parseInt(availableStr) : undefined;
        await addBook(title, author, publishedDate, category, quantity, available);
        break;
      }

      case '3': {
        const { borrowBooks } = await import('./routes/borrowBooks');
        const userId = parseInt(await ask('Nh·∫≠p ID ng∆∞·ªùi d√πng: '));
        const bookInput = await ask('Nh·∫≠p ID s√°ch (ho·∫∑c m·∫£ng s√°ch, v√≠ d·ª•: [1, 2, 3]): ');
        let books: number | number[];
        try {
          books = JSON.parse(bookInput); // Parse input nh∆∞ m·∫£ng
        } catch {
          books = parseInt(bookInput); // Ho·∫∑c ƒë∆°n s·ªë
        }
        await borrowBooks(userId, books);
        break;
      }

      case '4': {
        const { returnBook } = await import('./routes/returnBook');
        const userId = parseInt(await ask('Nh·∫≠p ID ng∆∞·ªùi d√πng: '));
        const bookId = parseInt(await ask('Nh·∫≠p ID s√°ch ƒë√£ m∆∞·ª£n: '));
        const returnDateStr = await ask('Ng√†y tr·∫£ s√°ch (b·ªè tr·ªëng n·∫øu tr·∫£ ngay): ');
        const returnDate = returnDateStr ? new Date(returnDateStr).toISOString() : new Date().toISOString();
        await returnBook(userId, bookId, returnDate);
        break;
      }

      case '5': {
        const { listUsers } = await import('./routes/listUser');
        await listUsers();
        break;
      }

      case '6': {
        const { listBooks } = await import('./routes/listBook');
        await listBooks();
        break;
      }

      case '7': {
        const { search } = await import('./routes/search');
        console.log(`
      üîç H·ªá th·ªëng tra c·ª©u:
      1. Danh s√°ch ng∆∞·ªùi ƒëang n·ª£ ti·ªÅn
      2. Danh s√°ch s√°ch ch∆∞a tr·∫£
      3. Danh s√°ch s√°ch ƒë√£ qu√° h·∫°n
      4. T·∫•t c·∫£ s√°ch ƒëang ƒë∆∞·ª£c m∆∞·ª£n
      5. L·ªãch s·ª≠ giao d·ªãch (m∆∞·ª£n + tr·∫£)
      0. Quay l·∫°i
        `);
        const input = await ask('üëâ Nh·∫≠p l·ª±a ch·ªçn (0-5): ');
        const option = parseInt(input.trim());
        await search(option);
        break;
      }
      
      case '8': {
        const { searchBook } = await import('./routes/searchBook');
        await searchBook();
        break;
      }

      case '9': {
        const { searchUser } = await import('./routes/searchUser');
        await searchUser();
        break;
      }

      case '0': {
        console.log('üëã Tho√°t ch∆∞∆°ng tr√¨nh.');
        process.exit(0);
      }

      default: {
        console.log('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.');
        break;
      }
    }
  }
}

main();
